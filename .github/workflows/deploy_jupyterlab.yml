# This workflow will deploy source code on Cloud Run when a commit is pushed to the "main" branch
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Deploy it to Cloud Run
#
# To configure this workflow:
#
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Run            run.googleapis.com
#    Cloud Build          cloudbuild.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Ensure the required IAM permissions are granted
#
#    Cloud Run
#      roles/run.admin
#      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
#
#    Cloud Build
#      roles/cloudbuild.builds.editor
#
#    Cloud Storage
#      roles/storage.objectAdmin
#
#    Artifact Registry
#      roles/artifactregistry.admin     (project or repository level)
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles
#
# 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
#
# 5. Change the values for the SERVICE and REGION environment variables (below).
#
# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run
#
# Further reading:
#   Cloud Run runtime service account   - https://cloud.google.com/run/docs/securing/service-identity
#   Cloud Run IAM permissions           - https://cloud.google.com/run/docs/deploying-source-code#permissions_required_to_deploy
#   Cloud Run builds from source        - https://cloud.google.com/run/docs/deploying-source-code
#   Principle of least privilege        - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege

name: Build Docker and Deploy to Cloud Run

on:
  push:
    branches: [main, master]

env:
  CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }} # TODO: update Google Cloud project id
  APP_NAME: jupyterlab-ey-uhi
  REGION: ${{ vars.REGION }} # TODO: update Cloud Run service region
  PROJECT_ID: ${{ vars.PROJECT_ID }}

jobs:
  # Job to build docker of the jupyterlab
  build-docker-jupyterlab:
    name: Build JupyterLab image

    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: read
      id-token: write

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ env.CREDENTIALS }}

      - name: Push to GCR
        uses: RafikFarhad/push-to-gcr-github-action@v5-rc1
        with:
          registry: gcr.io
          project_id: ${{ env.PROJECT_ID }}
          image_name: ${{ env.APP_NAME }}-image
          image_tag: latest
          dockerfile: ./Dockerfile
          context: .

  # Deploy JupyterLab to Cloud Run
  deploy-to-cloud-run-jupyterlab:
    name: Deploy JupyterLab to Cloud Run

    needs: build-docker-jupyterlab

    permissions:
      contents: read
      id-token: write

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ env.CREDENTIALS }}

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v2"
        with:
          version: ">= 363.0.0"

      - name: "Deploy to Cloud Run"
        run: |
          gcloud run deploy ${{ env.APP_NAME }} \
            --image=gcr.io/${{ env.PROJECT_ID}}/${{ env.APP_NAME }}-image:latest \
            --region=${{ env.REGION }} \
            --cpu=8 \
            --memory=32Gi \
            --allow-unauthenticated \
            --port 8080
